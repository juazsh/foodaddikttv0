// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id         String   @id @default(uuid()) @map("_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  username   String   @unique
  name       String?
  arabicName String?
  address    Address?
  Order      Order[]
}

model Owner {
  id         String   @id @default(uuid()) @map("_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  username   String   @unique
  name       String?
  arabicName String?
  stores     Store[]
  approved   Boolean  @default(false)
}

model Store {
  id               String              @id @default(uuid()) @map("_id")
  createdAt        DateTime            @default(now())
  belongsToId      String
  updatedAt        DateTime            @updatedAt
  belongsTo        Owner               @relation(fields: [belongsToId], references: [id], onDelete: Cascade)
  name             String
  arabicName       String?
  address          Address
  arabicAddress    Address?
  searchTags       String[]
  arabicSearchTags String[]
  location         LocationCoordinates
  images           String[]
  menu             MenuItem[]
  approved         Boolean             @default(false)
  reviews          Review[]
  Order            Order[]
}

type LocationCoordinates {
  type        String
  coordinates Float[]
}

model MenuItem {
  id                String   @id @default(uuid()) @map("_id")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ofStoreId         String
  ofStore           Store    @relation(fields: [ofStoreId], references: [id], onDelete: Cascade)
  name              String
  arabicName        String?
  description       String
  arabicDescription String?
  price             Float
  category          Category
  reviews           Review[]
  images            String[]
}

enum Category {
  MEDETERIAN
  AMERICAN
  SWEET
}

type Review {
  createdAt     DateTime @default(now())
  username      String
  comment       String?
  arabicComment String?
  rating        Int
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Order {
  id         String      @id @default(uuid()) @map("_id")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  total      Float
  status     OrderStatus
  orderItems OrderItem[]
  orderLogs  OrderLog
}

type OrderLog {
  createdAt      DateTime    @default(now())
  previousStatus OrderStatus
  currentStatus  OrderStatus
}

enum OrderStatus {
  SUBMITTED
  STARTED
  CANCELLED
  INPROCESS
  PREPARED
  WAITING
  CLOSED
}

enum SpiceLevel {
  SUPERHOT
  HOT
  MEDIUM
  MILD
}

type OrderItem {
  menuItem   String
  quantity   Int
  price      Float
  spiceLevel SpiceLevel
  note       String?
  arabicNote String?
}

model AccessRequest {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  username  String   @unique
  code      Int
}
